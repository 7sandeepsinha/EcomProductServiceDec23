DeSerialisation -> process of converting a json string to an object
Serialisation -> process for converting an object to a json string


Controller -> Input -> DTO, Output -> DTO, Downstream(service) -> DTO
controller only deals with DTOs

Service -> Input -> DTO, Output -> DTO, DownStream(Repository) -> Entity
layer at which dto to entity, or entity to dto conversion happens
conversion can be part of business logic

Repository -> Input -> Entity, Output -> Entity, DB saves Entity

Client -> Input -> DTO, Output -> DTO, all DTO


Small project, with few controller and fewer methods, single controller
advice class is ok

For bigger projects, we should have controller specific controller advice
classes


HW ->
Create 2 APIs, 1 in product controller, 1 in cart controller
make both of them return same custom exception
add 2 handler methods in each advice classes for that exception, and check
the code flow


20/04/2024--------------------------------------------------------------
ProductService -> FakeStorePSImpl, PSImpl, MongoDBPSImpl, AWSPSImpl

ProductController -> ProductService[PSImpl]


27/04/2024--------------------------------------------------------------
CID     ProductId       Price
1           1           10
2           2           20
1           3           30
1           4           40

total price for all the products for categoryID 1 -> 80

localhost:8080/category/price/id -> fetches all products for a given category id, and returns the sum of prices


@Before -> used for setting up test env
---- runs only once when we are executing the tests in the class
@After -> used for destroying the test env
---- runs only once after we are executing the tests in the class

@BeforeEach -> used for setting up for all tests
-- run before every test case
@AfterEach -> used for destroying for all
-- run after every test case


3 test cases in a class

@Before -  1
@After - 1
@BeforeEach - 3
@AfterEach - 3
